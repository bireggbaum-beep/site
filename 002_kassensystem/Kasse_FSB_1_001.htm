<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Kassensystem - Tablet Ansicht (Dark Mode)</title>
<style>
/* Basis-Stile */
body {
    margin: 0;
    font-family: Arial, sans-serif;
    background: #333;
    color: #eee;
}
/* Container für die Produktanzeige und den Warenkorb */
.container {
    display: flex;
    flex-direction: row;
    min-height: 100vh;
}
/* Bereich für die Produkte */
.products-area {
    flex: 1;
    font-size: 20px;
    padding: 5px;
    box-sizing: border-box;
    margin-right: 320px;
}
/* Rasterlayout: maximal 4 Produkte pro Reihe */
.product-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
}
.product {
    background-color: #444;
    border: 1px solid #666;
    border-radius: 5px;
    padding: 20px;
    text-align: center;
    cursor: pointer;
    transition: background-color 0.2s;
    user-select: none;
}
.product:hover { background-color: #666; }
.product img { max-width: 100%; height: auto; margin-bottom: 10px; }

/* Warenkorb-Bereich rechts */
.cart-area {
    position: fixed;
    top: 0;
    right: 0;
    width: 300px;
    height: 100vh;
    background-color: rgba(51,51,51,0.9);
    box-shadow: -2px 0 5px rgba(0,0,0,0.5);
    padding: 10px;
    box-sizing: border-box;
    overflow-y: auto;
}
/* Fester Bereich für den Endpreis – immer sichtbar */
.cart-summary {
    position: sticky;
    top: 0;
    background-color: rgba(51,51,51,0.9);
    z-index: 10;
    font-size: 27px;
    font-weight: bold;
    color: #FFD700;
    padding: 10px;
    text-align: center;
    border-bottom: 1px solid #555;
    margin-bottom: 10px;
}
/* Style für den Vollbild-Button */
.fullscreen-button {
    display: block;
    margin: 10px auto;
    background-color: #444;
    color: #eee;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
}
.fullscreen-button:hover { background-color: #666; }
.cart-header {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
}
/* Inline SVG als Warenkorb-Symbol */
.cart-icon {
    width: 28px;
    height: 28px;
    margin-right: 8px;
    stroke: #eee;
}
.cart-info {
    font-size: 16px;
    line-height: 1.4;
    flex-grow: 1;
    text-align: center;
}
/* Textlink zum gesamten Warenkorb leeren */
.clear-cart {
    font-size: 14px;
    text-decoration: underline;
    color: lightblue;
    cursor: pointer;
    margin: 10px 0;
    display: block;
    text-align: center;
}
/* Warenkorbartikel */
.cart-items .cart-item {
    border-bottom: 1px solid #555;
    padding: 15.5px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 15px;
}
.remove-btn {
    background: none;
    border: none;
    color: red;
    cursor: pointer;
    font-size: 22px;
    margin-left: 10px;
}
/* Endpreis (zweite Anzeige unten, optional) */
.cart-discounted {
    display: none;
    font-size: 22px;
    font-weight: bold;
    color: #007BFF;
    margin-top: 15px;
    text-align: center;
}
/* Responsive */
@media (max-width: 800px) {
    .container { flex-direction: column; }
    .products-area { margin-right: 0; }
    .cart-area {
        position: relative;
        width: 100%;
        height: auto;
        box-shadow: none;
    }
}
.product .unit-price {
    font-size: 0.7em;
    display: block;
}
.cart-discount-info {
    font-size: 14px;
    color: #999;
    text-align: center;
    margin-top: 5px;
}
</style>
</head>
<body>
<div class="container">
  <!-- Produktbereich -->
  <div class="products-area">
    <div class="product-grid" id="product-grid">
      <!-- Produkte werden dynamisch aus products.json geladen -->
    </div>
  </div>

  <!-- Warenkorb-Bereich (als Sidebar rechts) -->
  <div class="cart-area">
      <div class="cart-summary">
          <button class="fullscreen-button" onclick="toggleFullscreen()">Vollbild</button>
          Endpreis: <span id="cart-discounted-display">0,00 €</span>
      </div>
      <div class="cart-header">
          <svg class="cart-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke-width="2">
              <circle cx="9" cy="21" r="1"></circle>
              <circle cx="20" cy="21" r="1"></circle>
              <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path>
          </svg>
          <div class="cart-info">
              <span id="cart-count">0</span> Artikel zum<br>Gesamtpreis von:
              <span id="cart-total">0,00 €</span><br>
              <span id="cart-discount-amount"></span><br>
              Endpreis: <span id="cart-discounted">0,00 €</span>
          </div>
      </div>
      <a href="#" class="clear-cart" onclick="clearCart(); return false;">Gesamten Warenkorb leeren</a>
      <div class="cart-items" id="cart-items"></div>
      <div class="cart-discounted">
          Endpreis: <span id="cart-discounted-display-bottom">0,00 €</span>
      </div>
  </div>
</div>

<!-- Fallback: statische Produkte im Template (werden nur verwendet, wenn kein JSON geladen werden kann und kein Cache existiert) -->
<template id="static-products">
  <div class="product" data-id="merino-naturwolle" data-price="0.00" data-name="Merino Naturwolle" data-unit="pro 100g-Strang"><b>Merino<br>Naturwolle<br>5,00 €</b><span class="unit-price">pro 100g-Strang</span></div>
  <div class="product" data-id="merino-sport" data-price="0.00" data-name="Merino Sport" data-unit="pro 100g-Strang"><b>Merino<br>Sport<br>5,00 €</b><span class="unit-price">pro 100g-Strang</span></div>
  <div class="product" data-id="merino-star" data-price="0.00" data-name="Merino Star" data-unit="pro 50g-Knäuel"><b>Merino<br>Star<br>2,50 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="biskaya" data-price="0.00" data-name="Biskaya" data-unit="pro 50g-Knäuel"><b>Biskaya<br><br>2,20 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="bel-lino" data-price="0.00" data-name="Bel Lino" data-unit="pro 50g-Knäuel"><b>Bel<br>Lino<br>2,20 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="solaire" data-price="0.00" data-name="Solaire" data-unit="pro 50g-Knäuel"><b>Solaire<br><br>2,20 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="soft-cotton" data-price="0.00" data-name="Soft Cotton" data-unit="pro 50g-Knäuel"><b>Soft<br>Cotton<br>1,50 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="cotton-star" data-price="0.00" data-name="Cotton Star" data-unit="pro 50g-Knäuel"><b>Cotton<br>Star<br>2,00 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="angora-elegance" data-price="0.00" data-name="Angora élegance" data-unit="pro 20g-Knäuel"><b>Angora<br>élegance<br>2,00 €</b><span class="unit-price">pro 20g-Knäuel</span></div>
  <div class="product" data-id="susiwool" data-price="0.00" data-name="Susiwool" data-unit="pro 50g-Knäuel"><b>Susiwool<br><br>1,00 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="susiline" data-price="0.00" data-name="Susiline" data-unit="pro 50g-Knäuel"><b>Susiline<br><br>1,00 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="sockenwolle-mit-seide" data-price="0.00" data-name="Sockenwolle mit Seide" data-unit="pro 50g-Knäuel"><b>Sockenwolle<br>mit Seide<br>3,50 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="lama-sockenwolle" data-price="0.00" data-name="Lama Sockenwolle" data-unit="pro 50g-Knäuel"><b>Lama<br>Sockenwolle<br>4,00 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="stabilia-sockenwolle" data-price="0.00" data-name="Stabilia Sockenwolle" data-unit="pro 50g-Knäuel"><b>Stabilia<br>Sockenwolle<br>1,50 €</b><span class="unit-price">pro 50g-Knäuel</span></div>
  <div class="product" data-id="wollkuegelchen-pack-500g" data-price="0.00" data-name="Wollkügelchen" data-unit="pro 500g-Pack"><b>Woll-<br>kügelchen<br>8,00 €</b><span class="unit-price">pro 500g-Pack</span></div>
  <div class="product" data-id="wende-muetze" data-price="0.00" data-name="Wendemütze" data-unit="pro Stück"><b>Wende-<br>mütze<br>17,35 €</b><span class="unit-price">pro Stück</span></div>
  <div class="product" data-id="lammwoll-muetze" data-price="0.00" data-name="Lammwoll Mütze" data-unit="pro Stück"><b>Lammwoll<br>Mütze<br>10,00 €</b><span class="unit-price">pro Stück</span></div>
  <div class="product" data-id="wollschal" data-price="0.00" data-name="Wollschal" data-unit="pro Stück"><b>Wollschal<br><br>24,00 €</b><span class="unit-price">pro Stück</span></div>
  <div class="product" data-id="stulpen" data-price="0.00" data-name="Stulpen" data-unit="pro Paar"><b>Stulpen<br><br>13,35 €</b><span class="unit-price">pro Paar</span></div>
  <div class="product" data-id="stirnband" data-price="0.00" data-name="Stirnband" data-unit="pro Stück"><b>Stirnband<br><br>19,35 €</b><span class="unit-price">pro Stück</span></div>
  <div class="product" data-id="lammwolle-stirnband" data-price="0.00" data-name="Lammwolle Stirnband" data-unit="pro Stück"><b>Lammwolle<br>Stirnband<br>7,35 €</b><span class="unit-price">pro Stück</span></div>
  <div class="product" data-id="wollsocken-mit-seide" data-price="0.00" data-name="Wollsocken mit Seide" data-unit="pro Paar"><b>Wollsocken<br>mit Seide<br>10,00 €</b><span class="unit-price">pro Paar</span></div>
  <div class="product" data-id="lamasocken" data-price="0.00" data-name="Lamasocken" data-unit="pro Paar"><b>Lamasocken<br><br>12,20 €</b><span class="unit-price">pro Paar</span></div>
  <div class="product" data-id="stabilia-arbeitssocken" data-price="0.00" data-name="Stabilia Arbeitssocken" data-unit="pro Paar"><b>Stabilia<br>Socken<br>5,35 €</b><span class="unit-price">pro Paar</span></div>
  <div class="product" data-id="makramee-3mm" data-price="0.00" data-name="Makramee 3mm" data-unit="pro 100g"><b>Makramee<br>3mm<br>1,50 €</b><span class="unit-price">pro 100g</span></div>
  <div class="product" data-id="makramee-5mm" data-price="0.00" data-name="Makramee 5mm" data-unit="pro 100g"><b>Makramee<br>5mm<br>2,50 €</b><span class="unit-price">pro 100g</span></div>
  <div class="product" data-id="kardenband" data-price="0.00" data-name="Kardenband" data-unit="pro 500g"><b>Kardenband<br><br>15,00 €</b><span class="unit-price">pro 500g</span></div>
  <div class="product" data-id="wollkuegelchen-500g" data-price="0.00" data-name="Wollkügelchen" data-unit="pro 500g"><b>Wollkügelchen<br><br>10,00 €</b><span class="unit-price">pro 500g</span></div>
</template>

<script>
const DATA_URL = "https://raw.githubusercontent.com/bireggbaum-beep/site/refs/heads/main/products.json";
const CACHE_KEY = "products.json.cache";
let DATA_CURRENCY = "EUR";

/* Warenkorb nach stabiler Produkt-ID */
const cart = {}; // { [id]: { id, name, price, count } }

/* Intl Formatter für Währungen (de-DE) */
function formatCurrency(value) {
    try {
        return new Intl.NumberFormat('de-DE', { style: 'currency', currency: DATA_CURRENCY }).format(value);
    } catch {
        // Fallback, falls Currency aus meta unbekannt ist
        return (value.toFixed(2) + " €");
    }
}

/* Name in zwei Zeilen darstellen (erste Lücke mit Zeilenumbruch ersetzen) */
function formatNameMultiline(name) {
    const idx = name.indexOf(" ");
    if (idx > -1) {
        return name.slice(0, idx) + "<br>" + name.slice(idx + 1);
    }
    return name;
}

/* Produkte aus JSON laden (mit Offline-Fallback) */
async function loadProducts() {
    try {
        const res = await fetch(DATA_URL, { cache: "no-store" });
        if (!res.ok) throw new Error("HTTP " + res.status);
        const data = await res.json();
        if (!data || !Array.isArray(data.products)) throw new Error("Ungültige Struktur");
        localStorage.setItem(CACHE_KEY, JSON.stringify(data));
        return data;
    } catch (e) {
        // Versuche Cache
        const cached = localStorage.getItem(CACHE_KEY);
        if (cached) {
            return JSON.parse(cached);
        }
        // Fallback: Template einlesen und zu Strukturen konvertieren
        return loadFromTemplate();
    }
}

/* Fallback: liest die <template>-Produkte und baut ein kompatibles Datenobjekt */
function loadFromTemplate() {
    const tpl = document.getElementById("static-products");
    const frag = tpl.content.cloneNode(true);
    const nodes = [...frag.querySelectorAll(".product")];
    const products = nodes.map((el, i) => ({
        id: el.getAttribute("data-id"),
        name: el.getAttribute("data-name"),
        price: parseFloat(el.getAttribute("data-price")),
        unit: { display: el.getAttribute("data-unit") || "" },
        category: null,
        active: true,
        order: (i + 1) * 10,
        aliases: []
    }));
    return {
        meta: { version: "fallback", ausgabedatum: "", currency: "EUR", vat_included: true },
        categories: [],
        products
    };
}

/* Produkte rendern */
function renderProducts(data) {
    DATA_CURRENCY = (data && data.meta && data.meta.currency) ? data.meta.currency : "EUR";
    const grid = document.getElementById("product-grid");
    grid.innerHTML = "";

    // Kategorien-Sortierung (optional)
    const catOrder = {};
    if (Array.isArray(data.categories)) {
        data.categories.forEach((c, idx) => {
            catOrder[c.id] = (typeof c.order === "number" ? c.order : (idx + 1) * 10);
        });
    }

    // Produkte filtern/sortieren
    const list = (data.products || [])
        .filter(p => p && p.active !== false)
        .sort((a, b) => {
            const ca = catOrder[a.category] ?? 9999;
            const cb = catOrder[b.category] ?? 9999;
            if (ca !== cb) return ca - cb;
            const oa = (typeof a.order === "number" ? a.order : 9999);
            const ob = (typeof b.order === "number" ? b.order : 9999);
            if (oa !== ob) return oa - ob;
            return (a.name || "").localeCompare(b.name || "", "de");
        });

    // Index für schnellen Zugriff
    window.productsIndex = {};
    list.forEach(p => { window.productsIndex[p.id] = p; });

    // Karten erzeugen
    list.forEach(p => {
        const card = document.createElement("div");
        card.className = "product";
        card.dataset.id = p.id;
        card.dataset.name = p.name;
        card.dataset.price = String(p.price);

        const unitText = p.unit && p.unit.display ? p.unit.display : "";
        const priceText = formatCurrency(Number(p.price));

        card.innerHTML = `
            <b>${formatNameMultiline(escapeHtml(p.name))}<br>${escapeHtml(priceText)}</b>
            <span class="unit-price">${escapeHtml(unitText)}</span>
        `;
        card.addEventListener("click", () => addToCartById(p.id));
        grid.appendChild(card);
    });
}

/* Einfaches Escaping für HTML-Inhalte */
function escapeHtml(s) {
    return String(s).replace(/[&<>"']/g, m => (
        { "&":"&amp;", "<":"&lt;", ">":"&gt;", '"':"&quot;", "'":"&#39;" }[m]
    ));
}

/* Warenkorb-Logik */
function updateCartDisplay() {
    let totalCount = 0;
    let totalPrice = 0;
    for (let id in cart) {
        totalCount += cart[id].count;
        totalPrice += cart[id].price * cart[id].count;
    }
    document.getElementById('cart-count').innerText = totalCount;
    document.getElementById('cart-total').innerText = formatCurrency(totalPrice);

    // 25% Rabatt
    const discountAmount = totalPrice * 0.25;
    const discountedPrice = totalPrice * 0.75;

    document.getElementById('cart-discount-amount').innerText = "25% Rabatt: -" + formatCurrency(discountAmount);
    document.getElementById('cart-discounted').innerText = formatCurrency(discountedPrice);
    document.getElementById('cart-discounted-display').innerText = formatCurrency(discountedPrice);
    const bottom = document.getElementById('cart-discounted-display-bottom');
    if (bottom) bottom.innerText = formatCurrency(discountedPrice);
}

function updateCartItems() {
    const cartItemsContainer = document.getElementById('cart-items');
    cartItemsContainer.innerHTML = '';
    for (let id in cart) {
        const item = cart[id];
        const div = document.createElement('div');
        div.className = 'cart-item';
        div.dataset.productId = id;
        div.innerHTML = `
            ${item.count} × ${escapeHtml(item.name)} – ${escapeHtml(formatCurrency(item.price * item.count))}
            <button class="remove-btn" aria-label="Entfernen" title="Entfernen" onclick="removeFromCart('${id}')">x</button>
        `;
        cartItemsContainer.appendChild(div);
    }
}

function addToCartById(id) {
    // Bevorzugt JSON-Produkte
    let p = (window.productsIndex && window.productsIndex[id]) ? window.productsIndex[id] : null;

    // Fallback: aus Datenattributen lesen, falls Karte ohne Index geklickt wurde
    if (!p) {
        const el = document.querySelector(`.product[data-id="${CSS.escape(id)}"]`);
        if (el) {
            p = { id, name: el.dataset.name, price: parseFloat(el.dataset.price) || 0 };
        }
    }

    if (!p) return;

    if (cart[id]) {
        cart[id].count++;
    } else {
        cart[id] = { id: id, name: p.name, price: Number(p.price) || 0, count: 1 };
    }
    updateCartDisplay();
    updateCartItems();
}

function removeFromCart(id) {
    if (cart[id]) {
        cart[id].count--;
        if (cart[id].count <= 0) delete cart[id];
        updateCartDisplay();
        updateCartItems();
    }
}

function clearCart() {
    for (let id in cart) delete cart[id];
    updateCartDisplay();
    updateCartItems();
}

/* Vollbild-Funktionalität */
function toggleFullscreen() {
    if (!document.fullscreenElement) {
        const el = document.documentElement;
        (el.requestFullscreen || el.mozRequestFullScreen || el.webkitRequestFullscreen || el.msRequestFullscreen).call(el);
    } else {
        (document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullscreen).call(document);
    }
}

/* Init */
(async function init() {
    const data = await loadProducts();
    renderProducts(data);
    updateCartDisplay();
    updateCartItems();
})();
</script>
</body>
</html>
